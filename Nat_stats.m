function output = Nat_stats(time,params,state,events)
% output = stats_pertussis(time,params, state,events)produces the output
% from the pertussis LHS experiments.

% Setup for when function is initially called by lhs (when only two input
% arguments are passed)

if nargin == 2
    
    
 output = struct('Total_Pop',zeros(params.time_entries,1),... 
 'SumTotal_Chronic',zeros(params.time_entries,1),... 
 'SumTotal_Chronic_onT',zeros(params.time_entries,1),... 
 'Total_sAg_prev',zeros(params.time_entries,1),... 
 'HCC_deaths',zeros(params.time_entries,1),... 
 'DC_deaths',zeros(params.time_entries,1),...
 'EverChronic', zeros(params.time_entries,1),...
 'prop_treated', zeros(11,1) ,...
 'Total_Chronic_no_T', zeros(params.time_entries*params.nA,1),...
 'Total_Chronic_T', zeros(params.time_entries*params.nA,1), ...
 'SumTotal_TreatEl',zeros(params.time_entries,1), ...
'S',zeros(params.time_entries*params.nA,1),... 
'V',zeros(params.time_entries*params.nA,1),...
'A',zeros(params.time_entries*params.nA,1),... 
'I',zeros(params.time_entries*params.nA,1),... 
'I1',zeros(params.time_entries*params.nA,1),... 
'I2',zeros(params.time_entries*params.nA,1),... 
'I3',zeros(params.time_entries*params.nA,1),...
'C1',zeros(params.time_entries*params.nA,1),... 
'C2',zeros(params.time_entries*params.nA,1),... 
'C3',zeros(params.time_entries*params.nA,1),...
'I1T',zeros(params.time_entries*params.nA,1),... 
'I2T',zeros(params.time_entries*params.nA,1),... 
'I3T',zeros(params.time_entries*params.nA,1),...
'C1T',zeros(params.time_entries*params.nA,1),... 
'C2T',zeros(params.time_entries*params.nA,1),... 
'C3T',zeros(params.time_entries*params.nA,1),...
'R',zeros(params.time_entries*params.nA,1),... 
'HCC',zeros(params.time_entries*params.nA,1),... 
'HCCT',zeros(params.time_entries*params.nA,1),... 
'DC',zeros(params.time_entries*params.nA,1),... 
'DCT',zeros(params.time_entries*params.nA,1) ); %,... 
% 
% 'Total_sAg_prev',zeros(params.time_entries,1),... 
% 'HBV_deaths',zeros(params.time_entries,1),... 
%  
% 'HCC_deaths_T_yr',zeros(params.time_entries,1),... 
% 'DC_deaths_T_yr',zeros(params.time_entries,1),...

    return;
    
elseif nargin ~= 4
    fprintf(1,'ERROR: invalid # parameters to statistics\n');
    return;
end

% Prepare output structure
 output = struct('Total_Pop',zeros(params.time_entries,1),... 
 'SumTotal_Chronic',zeros(params.time_entries,1),... 
 'SumTotal_Chronic_onT',zeros(params.time_entries,1),... 
 'Total_sAg_prev',zeros(params.time_entries,1),... 
 'HCC_deaths',zeros(params.time_entries,1),... 
 'DC_deaths',zeros(params.time_entries,1),...
 'EverChronic', zeros(params.time_entries,1),...
 'prop_treated', zeros(11,1) ,...
 'Total_Chronic_no_T', zeros(params.time_entries*params.nA,1),...
 'Total_Chronic_T', zeros(params.time_entries*params.nA,1), ...
 'SumTotal_TreatEl',zeros(params.time_entries,1), ...
'S',zeros(params.time_entries*params.nA,1),... 
'V',zeros(params.time_entries*params.nA,1),...
'A',zeros(params.time_entries*params.nA,1),... 
'I',zeros(params.time_entries*params.nA,1),... 
'I1',zeros(params.time_entries*params.nA,1),... 
'I2',zeros(params.time_entries*params.nA,1),... 
'I3',zeros(params.time_entries*params.nA,1),...
'C1',zeros(params.time_entries*params.nA,1),... 
'C2',zeros(params.time_entries*params.nA,1),... 
'C3',zeros(params.time_entries*params.nA,1),...
'I1T',zeros(params.time_entries*params.nA,1),... 
'I2T',zeros(params.time_entries*params.nA,1),... 
'I3T',zeros(params.time_entries*params.nA,1),...
'C1T',zeros(params.time_entries*params.nA,1),... 
'C2T',zeros(params.time_entries*params.nA,1),... 
'C3T',zeros(params.time_entries*params.nA,1),...
'R',zeros(params.time_entries*params.nA,1),... 
'HCC',zeros(params.time_entries*params.nA,1),... 
'HCCT',zeros(params.time_entries*params.nA,1),... 
'DC',zeros(params.time_entries*params.nA,1),... 
'DCT',zeros(params.time_entries*params.nA,1) ); 

% DEFINE STATES
% Disease states
S=state(:,1:params.nA);
V=state(:,params.nA+1:2*params.nA);
A=state(:,2*params.nA+1:3*params.nA);
I=state(:,3*params.nA+1:4*params.nA);
I1=state(:,4*params.nA+1:5*params.nA);
I2=state(:,5*params.nA+1:6*params.nA);
I3=state(:,6*params.nA+1:7*params.nA);
C1=state(:,7*params.nA+1:8*params.nA);
C2=state(:,8*params.nA+1:9*params.nA);
C3=state(:,9*params.nA+1:10*params.nA);
I1T=state(:,10*params.nA+1:11*params.nA);
I2T=state(:,11*params.nA+1:12*params.nA);
I3T=state(:,12*params.nA+1:13*params.nA);
C1T=state(:,13*params.nA+1:14*params.nA);
C2T=state(:,14*params.nA+1:15*params.nA);
C3T=state(:,15*params.nA+1:16*params.nA);
H=state(:,16*params.nA+1:17*params.nA);
HT=state(:,17*params.nA+1:18*params.nA);
D=state(:,18*params.nA+1:19*params.nA);
DT=state(:,19*params.nA+1:20*params.nA);
R=state(:,20*params.nA+1:21*params.nA);

%Ac_incidence =state(:,21*params.nA+1:22*params.nA); %ac incidence
%ImTol_incidence =state(:,22*params.nA+1:23*params.nA); % # new chronic inf
HCC_deaths = state(:,23*params.nA+1:24*params.nA); %deaths HCC
HCC_deaths_T= state(:,24*params.nA+1:25*params.nA); % deaths HCC on T
DC_deaths = state(:,25*params.nA+1:26*params.nA); % deaths DC
DC_deaths_T = state(:,26*params.nA+1:27*params.nA); % deaths DC T
bg_deaths = state(:,27*params.nA+1:28*params.nA); %bg deaths in people living with CHB 


%% Total in infection state by age: 
Total_Chronic_no_T = I + I1 + I2 + I3 + C1 + C2 + C3 + H + D;
Total_Chronic_T = I1T + I2T + I3T + C1T + C2T + C3T + HT + DT;
Total_Chronic = Total_Chronic_no_T + Total_Chronic_T;

SumTotal_Chronic = sum(Total_Chronic,2);
SumTotal_Chronic_onT = sum(Total_Chronic_T,2);
%SumTotal_Chronic_no_T = sum(Total_Chronic_no_T');


SumTotal_TreatEl = sum(C1 + C2 + C3 + H + D + I1 + I3 + C1T + C2T + C3T + HT + DT + I1T + I3T,2);


% Cumulative number of deaths
Cumulative_HCC_deaths_T = sum(HCC_deaths_T,2);
Cumulative_HCC_deaths = sum(HCC_deaths,2);
Cumulative_HCC_deaths_all = Cumulative_HCC_deaths_T + Cumulative_HCC_deaths;


% Number of deaths per year
%incident_HCC_deaths_T = [0; diff(Cumulative_HCC_deaths_T)];
%incident_HCC_deaths= [0; diff(Cumulative_HCC_deaths)];
incident_HCC_deaths_all = [0; diff(Cumulative_HCC_deaths_all)];


% Number of deaths per year
%incident_DC_deaths_T = [0, sum(diff(DC_deaths_T)')];
%incident_DC_deaths = [0, sum(diff(DC_deaths)')];
incident_DC_deaths_all = [0; sum(diff(DC_deaths + DC_deaths_T),2)];

Total_Pop_Age = (S+V+A+I+I1+I2+I3+C1+C2+C3+I1T+I2T+I3T+C1T+C2T+C3T+H+HT+D+DT+R);
SumTotal_Pop= sum(Total_Pop_Age,2);

Treat_allChron_all_2011to2021 = (params.treated2000to2021(12:end)./SumTotal_Chronic(61:71));

% Total HBsAg prevalence (prop of pop chronicly infected with HBV)
% HBsAg = HBV surface antigen
Total_sAg_prev = SumTotal_Chronic./(SumTotal_Pop);
%size(Total_sAg_prev)
%sAg_prev_age= Total_Chronic./Total_Pop_Age;
%size(T)



%% Number of people ever chronicly infected up to each year:
%Years1(21:66) = 1971 to 2016
% Prop diag including deaths (used in 2016 & BC thesis):
EverChronic = SumTotal_Chronic + sum((HCC_deaths + HCC_deaths_T),2) + sum((DC_deaths + DC_deaths_T),2) + sum(bg_deaths,2);
% Same as Ever_Chronic1: Ever_Chronic3 =  SumTotal_Chronic' + Cumulative_DC_deaths_all  + Cumulative_HCC_deaths_all;

 %%  ------------------------------------------------------- %%%

% OUTPUT RESULTS % 
output.Total_Pop=SumTotal_Pop; %100 by 1
output.SumTotal_Chronic = SumTotal_Chronic; %100 by 1
output.SumTotal_Chronic_onT = SumTotal_Chronic_onT; %100 by 1
output.Total_sAg_prev=Total_sAg_prev; %100 by 1
output.HCC_deaths = incident_HCC_deaths_all; %100 by 1
output.DC_deaths = incident_DC_deaths_all; %100 by 1
output.EverChronic = EverChronic;
output.prop_treated = Treat_allChron_all_2011to2021; %11 by 1
output.Total_Chronic_no_T = Total_Chronic_no_T;
output.Total_Chronic_T = Total_Chronic_T;
output.SumTotal_TreatEl = SumTotal_TreatEl;

output.S=S;
output.V=V;
output.A=A;
output.I=I;
output.I1=I1;
output.I2=I2;
output.I3=I3;
output.C1=C1;
output.C2=C2;
output.C3=C3;
output.I1T=I1T;
output.I2T=I2T;
output.I3T=I3T;
output.C1T=C1T;
output.C2T=C2T;
output.C3T=C3T;
output.R=R;
output.HCC=H;
output.HCCT=HT;
output.DC=D;
output.DCT=DT;


end
